import os
import sys
import rtconfig

from rtconfig import RTT_ROOT

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

TARGET = 'ap_Image.' + rtconfig.TARGET_EXT

DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
    CXX = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env['ASCOM'] = env['ASPPCOM']

Export('RTT_ROOT')
Export('rtconfig')

SDK_ROOT = os.path.abspath('./')

drivers_path_prefix = os.path.dirname(SDK_ROOT) + '/drivers'

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT, has_libcpu = False)

if GetDepend('RT_USING_SMART'):
    # use smart link.lds
    env['LINKFLAGS'] = env['LINKFLAGS'].replace('link.lds', 'link_smart.lds')

# include libraries
objs.extend(SConscript(drivers_path_prefix + '/SConscript', variant_dir='build/drivers', duplicate=0))

stack_size = 4096

stack_lds = open('link_stacksize.lds', 'w')
if GetDepend('__STACKSIZE__'):
    stack_size = GetDepend('__STACKSIZE__')
stack_lds.write('__STACKSIZE__ = %d;\n' % stack_size)

if GetDepend('TOTAL_MEMORY'):
    total_memory_str = GetDepend('TOTAL_MEMORY')
    total_memory = int(total_memory_str, 0)
stack_lds.write('TOTAL_MEMORY = 0x%x;\n' % total_memory)

if GetDepend('C920_BOOT_ADDR'):
    boot_addr_str = GetDepend('C920_BOOT_ADDR')
    boot_addr = int(boot_addr_str, 0)
stack_lds.write('C920_BOOT_ADDR = 0x%x;\n' % boot_addr)
stack_lds.close()

# 获取 TPU_INDEX 的值
if GetDepend('SOC_TYPE_BM1690_TP'):
    tpu_index = GetDepend('TPU_INDEX')
    tpu_index = 0 if tpu_index in (False, None) else int(tpu_index)
    print("[INFO] TPU_INDEX = ", tpu_index)
    # 动态生成目标文件名
    target_ext = rtconfig.TARGET_EXT
    TARGET = f"tp_Image_{tpu_index}.{target_ext}"

# make a building
DoBuilding(TARGET, objs)
